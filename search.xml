<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>完全二叉树的节点个数</title>
      <link href="/2023/08/06/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/"/>
      <url>/2023/08/06/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p><em><strong>求一个完全二叉树的节点个数。   <a href="https://leetcode.cn/problems/count-complete-tree-nodes/">leetcode链接</a></strong></em></p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="1-通用解法"><a href="#1-通用解法" class="headerlink" title="1.通用解法"></a>1.通用解法</h3><p>对于普通的二叉树，我们可以利用深度优先和广度优先方式，在遍历节点的过程中统计节点的个数，在此题中也可以采用这种方式，下面给出代码，不过多赘述。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 深度优先</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(root== <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> countNodes(root.left)+countNodes(root.right)+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 广度优先</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       queue.add(root);</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">               <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">               res++;</span><br><span class="line">               <span class="keyword">if</span> (node.left != <span class="literal">null</span>) queue.offer(cur.left);</span><br><span class="line">               <span class="keyword">if</span> (node.right != <span class="literal">null</span>) queue.offer(cur.right);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-完全二叉树解法"><a href="#2-完全二叉树解法" class="headerlink" title="2.完全二叉树解法"></a>2.完全二叉树解法</h3><p>但是这并没有达到本题<code>考察的目的</code>，题目中指出该二叉树为<code>完全二叉树</code>[^1]，所以应该利用其特点来解题。我们知道满二叉树的计算公式是：<code>2的深度次方-1</code>，而一棵完全二叉树虽然无法直接利用该公式计算，但在它的左子树或右子树中一定可以找到满二叉树，而那部分完全可以借助满二叉树的计算公式。具体思路以注释形式体现在代码中。</p><p><em>方框中为在子树中找到的满二叉树:</em></p><p><img src= "/img/loading.gif" data-lazy-src="/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/image1.png" alt="方框中为在子树中找到的满二叉树"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 利用到完全二叉树的特点</span></span><br><span class="line"><span class="comment">    * 完全二叉树可以看成多个满二叉树拼接而成，满二叉树结点个数用2^n-1来计算，n表示层数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(root== <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//在完全二叉树中，如果一直向左的深度与一直向右的深度相等，则说明是满二叉树，普通二叉数没有这个特点</span></span><br><span class="line">       <span class="comment">//分别计算深度。为什么初始值设为1呢？如果两值计算出来相等，需要利用公式2的n次方来计算，如果值是1（left=right=null即二叉树只有一个根结点），则返回结果为2^1-1=1;如果值是2，则返回结果是2^2-1=3</span></span><br><span class="line">       <span class="type">int</span> leftDepth=<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> rightDepth=<span class="number">1</span>;</span><br><span class="line">       TreeNode left=root.left;</span><br><span class="line">       TreeNode right=root.right;</span><br><span class="line">       <span class="keyword">while</span>(left!=<span class="literal">null</span>)&#123;</span><br><span class="line">           left=left.left;</span><br><span class="line">           leftDepth++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(right!=<span class="literal">null</span>)&#123;</span><br><span class="line">           right=right.right;</span><br><span class="line">           rightDepth++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//相等表示该树是满二叉树，运用公式计算节点数。因为后面用到了递归，所以此处的树就不一定是原树了，也可能是子树，即某棵子树为满二叉树。</span></span><br><span class="line">       <span class="keyword">if</span>(leftDepth==rightDepth)&#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="type">int</span>)(Math.pow(<span class="number">2</span>,leftDepth) -<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//不是满二叉树则向左右子树寻找满二叉树并将求得的结点数以及根结点那一个加起来，这样一层一层递归最终求得整棵树的节点数</span></span><br><span class="line">       <span class="keyword">return</span> countNodes(root.left)+countNodes(root.right)+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>[^1]: 设二叉树的<code>深度为h</code>，<code>除第 h 层外</code>，<code>其它各层 (1～h-1) 的结点数都达到最大个数(即1~h-1层为一个满二叉 树)</code>，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 完全二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水专传奇</title>
      <link href="/2023/08/04/%E6%B0%B4%E4%B8%93%E4%BC%A0%E5%A5%87/"/>
      <url>/2023/08/04/%E6%B0%B4%E4%B8%93%E4%BC%A0%E5%A5%87/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-初入堂堂水专"><a href="#第一章-初入堂堂水专" class="headerlink" title="第一章 初入堂堂水专"></a>第一章 初入堂堂水专</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>​误入水泥地，心情很压抑。</p><p>​临时抱佛脚，啊我临时抱佛脚。</p>]]></content>
      
      
      <categories>
          
          <category> 小作文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎说说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感谢贴</title>
      <link href="/2023/08/04/%E6%84%9F%E8%B0%A2%E8%B4%B4/"/>
      <url>/2023/08/04/%E6%84%9F%E8%B0%A2%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="我谢谢你们哈"><a href="#我谢谢你们哈" class="headerlink" title="我谢谢你们哈"></a>我谢谢你们哈</h1><h2 id="感谢CCTV"><a href="#感谢CCTV" class="headerlink" title="感谢CCTV"></a>感谢CCTV</h2><h2 id="感谢MTV"><a href="#感谢MTV" class="headerlink" title="感谢MTV"></a>感谢MTV</h2><h2 id="感谢山东卫视"><a href="#感谢山东卫视" class="headerlink" title="感谢山东卫视"></a>感谢山东卫视</h2><h2 id="感谢山河大学"><a href="#感谢山河大学" class="headerlink" title="感谢山河大学"></a>感谢山河大学</h2><h2 id="感谢水专"><a href="#感谢水专" class="headerlink" title="感谢水专"></a>感谢水专</h2><h2 id="感谢北京协和脑科疾病治理有限医院"><a href="#感谢北京协和脑科疾病治理有限医院" class="headerlink" title="感谢北京协和脑科疾病治理有限医院"></a>感谢北京协和脑科疾病治理有限医院</h2>]]></content>
      
      
      <categories>
          
          <category> 小作文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎说说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/04/hello-world/"/>
      <url>/2023/08/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
