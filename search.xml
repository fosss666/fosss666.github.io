<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker安装、配置、下载软件等</title>
      <link href="/2023/10/11/docker%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E7%AD%89/"/>
      <url>/2023/10/11/docker%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E3%80%81%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><a href="http://www.docker.com/">docker官网</a></p><p><a href="https://hub.docker.com/">docker hub官网(需要魔法)</a>                  <a href="https://hub.daocloud.io/">国内仓库</a></p><h2 id="一、linux安装docker"><a href="#一、linux安装docker" class="headerlink" title="一、linux安装docker"></a>一、linux安装docker</h2><p><em><strong>(使用root权限，如果不是，每个命令前加sudo)</strong></em></p><p><a href="https://docs.docker.com/engine/install/">官网安装教程</a></p><h3 id="1-ubuntu安装docker"><a href="#1-ubuntu安装docker" class="headerlink" title="1. ubuntu安装docker"></a>1. ubuntu安装docker</h3><ol><li><p>卸载ubuntu原装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>更新软件包和版本数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure></li><li><p>安装docker所需的依赖文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure></li><li><p>添加docker官方GPG密钥：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li><li><p>添加docker国内镜像源（此处选用阿里云）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>docker 启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>安装工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为apt添加了https 支持</span></span><br><span class="line">apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure></li><li><p>重启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-centos安装docker"><a href="#2-centos安装docker" class="headerlink" title="2. centos安装docker"></a>2. centos安装docker</h3><ol><li><p>清除旧版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装gcc相关：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p>设置仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先安装yum-utils</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置（阿里云）仓库地址</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>更新yum软件包索引：<code>yum makecache fast</code></p></li><li><p>安装docker引擎：<code>yum -y install docker-ce docker-ce-cli containerd.io</code></p></li><li><p>启动：<code>systemctl start docker</code></p></li></ol><h3 id="3-配置镜像加速器"><a href="#3-配置镜像加速器" class="headerlink" title="3. 配置镜像加速器"></a>3. 配置镜像加速器</h3><p>ubuntu或centos都可用以下方式配置镜像加速器</p><ol><li><p>登录<a href="https://www.aliyun.com/">阿里云官网</a>，搜索容器镜像服务</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309281036686.png" alt="image-20230928103643167"></p></li><li><p>进入后在镜像工具-镜像加速器下复制自己的加速器地址，在linux中配置镜像加速器地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;【填写个人地址】&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、docker基本命令"><a href="#二、docker基本命令" class="headerlink" title="二、docker基本命令"></a>二、docker基本命令</h2><h3 id="1-帮助启动类命令"><a href="#1-帮助启动类命令" class="headerlink" title="1. 帮助启动类命令"></a>1. 帮助启动类命令</h3><ul><li>防火墙状态：<code>ufw status</code></li><li>关闭或开启防火墙：<ul><li>ubuntu: <code>ufw enable/disable</code></li><li>centos: <code>systemctl enable/disable firewalld</code></li></ul></li><li>开放及关闭端口：<ul><li>ubuntu：<code>ufw [delete] allow 【端口号】</code></li><li>centos：<code>firewall-cmd --zone=public --add/remove-port=【端口号】/tcp --permanent</code></li></ul></li><li>启动docker：<code>systemctl start docker</code></li><li>停止docker：<code>systemctl stop docker</code></li><li>重启docker：<code>systemctl restart docker</code></li><li>查看docker状态：<code>systemctl status docker</code></li><li>是否开机自启：<code>systemctl enable/disable docker</code></li><li>查看版本：<code>docker version</code></li><li>查看概要信息：<code>docker info</code></li><li>查看总体帮助文档：<code>docker --help</code></li><li>查看docker命令帮助文档：<code>docker 具体命令 --help</code></li></ul><h3 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2. 镜像命令"></a>2. 镜像命令</h3><ul><li>展示镜像：<code>docker images</code></li><li>查询镜像：<code>docker search 【镜像名】</code></li><li>拉取镜像：<code>docker pull 镜像名[:版本]  # 默认版本是latest</code></li><li>删除镜像： <code>docker rmi [-f] 镜像名称或镜像id   # -f表示强制删除</code></li></ul><h3 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3. 容器命令"></a>3. 容器命令</h3><ul><li><p>创建容器：<code>docker run [-d -v -p --name --restart……] 镜像名:版本</code></p><p>-v：数据挂载</p><p>-d：后台启动</p><p>-p：端口映射    <code>6379:6379</code>表示左边为暴露的端口，右边为容器端口</p><p>–name：自定义容器名</p><p>–restart：开机是否自启</p><p>-it：启动交互式容器</p></li><li><p>显示已启动的容器：<code>docker ps</code></p></li><li><p>显示所有容器：<code>docker ps -a</code></p></li><li><p>进入容器：<code>docker exec -it 【容器名或id】 /bin/bash【或bash】</code>   </p><p>退出容器：<code>exit</code></p></li><li><p>删除容器：<code>docker rm 【容器名称/容器id(可只写一部分)】 # 可加-f参数强制删除</code>  </p></li><li><p>设置容器开机自启：<code>docker update --restart=always 【容器名称或id】</code></p><p>关闭开机自启：<code>docker update --restart=no 【容器名称或id】</code></p></li><li><p>启动容器：<code>docker start 容器名/容器id(可部分)</code></p><p>重启容器：<code>docker restart 容器名/容器id(可部分)</code></p><p>关闭容器：<code>docker start 容器名/容器id(可部分)</code></p></li><li><p>查看日志：<code>docker logs 【容器名或id】</code></p></li><li><p>复制容器文件到本地系统文件，防止容器删除后数据也没了：<code>docker cp 【容器id(可只写一部分):文件位置】 本地位置</code></p></li><li><p>导入导出容器：</p><ul><li>导出容器的内容留作为一个tar归档文件：<code>docker export 【容器id】 &gt; abc.tar</code></li><li>从tar包中的内容创建一个新的文件系统再导入为镜像：<code>cat abc.tar | docker import - 镜像用户/镜像名:镜像版本号 </code></li></ul></li></ul><h2 id="三、docker安装镜像及启动容器"><a href="#三、docker安装镜像及启动容器" class="headerlink" title="三、docker安装镜像及启动容器"></a>三、docker安装镜像及启动容器</h2><h3 id="1-docker-安装mysql"><a href="#1-docker-安装mysql" class="headerlink" title="1. docker 安装mysql"></a>1. docker 安装mysql</h3><ol><li><p>拉取镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql   默认拉取最新版，可在后边加上&#x27;:5.7&#x27;指定5.7版本</span><br></pre></td></tr></table></figure></li><li><p>启动容器，做好端口映射、数据挂载（放置容器删除后数据也被删除）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --privileged=true \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name mysql \</span><br><span class="line">--update always \</span><br><span class="line">mysql:latest</span><br></pre></td></tr></table></figure></li><li><p>设置字符集为utf8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /mydata/mysql/conf</span><br><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><p>编辑内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure></li><li><p>重启mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-docker安装emqx"><a href="#2-docker安装emqx" class="headerlink" title="2. docker安装emqx"></a>2. docker安装emqx</h3><ol><li><p>拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull emqx/emqx</span><br></pre></td></tr></table></figure></li><li><p>运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 18083:18083 -p 8883:8883 -p 8083:8083 -p 8084:8084 -p 1883:1883 --name=emqx -d emqx/emqx</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-docker安装rtmp"><a href="#3-docker安装rtmp" class="headerlink" title="3. docker安装rtmp"></a>3. docker安装rtmp</h3><ol><li><p>拉取(nginx和rtmp的整合包，rtmp是流媒体协议，用于直播等)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull alqutami/rtmp-hls</span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 1935:1935 -p 8080:8080 --name=nginx_rtmp -d alqutami/rtmp-hls</span><br></pre></td></tr></table></figure></li><li><p>拷贝文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 容器id:/etc.nginx /mydata</span><br></pre></td></tr></table></figure></li><li><p>将mydata下的nginx文件修改名称为nginx_rtmp：直接在图形界面上编辑</p></li><li><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 1935:1935 -p 8080:8080 \</span><br><span class="line">-v /mydata/nginx_rtmp:/etc/nginx \</span><br><span class="line">--name nginx_rtmp \</span><br><span class="line">-d alqutami/rtmp-hls</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-docker安装nginx"><a href="#4-docker安装nginx" class="headerlink" title="4. docker安装nginx"></a>4. docker安装nginx</h3><ol><li><p>拉取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></li><li><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run  -p 80:80 --name nginx --restart=always \</span><br><span class="line">-v /mydata/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx \</span><br><span class="line">-d  nginx:latest</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-docker安装kafka"><a href="#5-docker安装kafka" class="headerlink" title="5. docker安装kafka"></a>5. docker安装kafka</h3><ol><li><p>创建一个网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create app-tier --driver bridge</span><br></pre></td></tr></table></figure></li><li><p>安装zookeeper(kafka依赖zookeeper)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name zookeeper-server \</span><br><span class="line">--network app-tier \</span><br><span class="line">-e ALLOW_ANONYMOUS_LOGIN=<span class="built_in">yes</span> \</span><br><span class="line">--restart always \</span><br><span class="line">bitnami/zookeeper:latest</span><br></pre></td></tr></table></figure></li><li><p>安装kafka</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kafka-server \</span><br><span class="line">--network app-tier \</span><br><span class="line">-p 9092:9092 \</span><br><span class="line">-e ALLOW_PLAINTEXT_LISTENER=<span class="built_in">yes</span> \</span><br><span class="line">-e KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181 \</span><br><span class="line">-e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://【主机ip】:9092 \</span><br><span class="line">--restart always \</span><br><span class="line">bitnami/kafka:latest</span><br></pre></td></tr></table></figure></li><li><p>kafka-map图形化管理工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kafka-map \</span><br><span class="line">--network app-tier \</span><br><span class="line">-p 9001:8080 \</span><br><span class="line">-v /mydata/kafka-map/data:/usr/local/kafka-map/data \</span><br><span class="line">-e DEFAULT_USERNAME=admin \</span><br><span class="line">-e DEFAULT_PASSWORD=admin \</span><br><span class="line">--restart always dushixiang/kafka-map:latest</span><br></pre></td></tr></table></figure><ul><li><em>访问地址：http:&#x2F;&#x2F;服务器IP:9001&#x2F;</em></li><li>默认账号密码为：admin</li></ul></li></ol><h3 id="6-docker安装Elasticsearch、Kibana、IK分词器"><a href="#6-docker安装Elasticsearch、Kibana、IK分词器" class="headerlink" title="6. docker安装Elasticsearch、Kibana、IK分词器"></a>6. docker安装Elasticsearch、Kibana、IK分词器</h3><h4 id="1-安装Elasticsearch"><a href="#1-安装Elasticsearch" class="headerlink" title="1. 安装Elasticsearch"></a>1. 安装Elasticsearch</h4><ol><li><p>创建网络：因为需要部署kibana容器，因此需要让es和kibana容器互联</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像 <em>jdk8不能使用6以上的版本</em></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>创建挂载点目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /mydata/es/data /mydata/es/config /mydata/es/plugins</span><br><span class="line"><span class="built_in">chmod</span> 777  /mydata/es/data</span><br><span class="line"><span class="built_in">chmod</span> 777  /mydata/es/config</span><br><span class="line"><span class="built_in">chmod</span> 777  /mydata/es/plugins</span><br></pre></td></tr></table></figure></li><li><p>部署单点es，创建es容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--name es \</span><br><span class="line">--network es-net \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">--privileged \</span><br><span class="line">-v /mydata/es/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v /mydata/es/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">elasticsearch:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装成功</p><p>访问<a href="http://ip:9200。显示版本等信息说明启动成功">http://ip:9200。显示版本等信息说明启动成功</a></p></li></ol><h4 id="2-安装Kibana"><a href="#2-安装Kibana" class="headerlink" title="2. 安装Kibana"></a>2. 安装Kibana</h4><ol><li><p>拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>创建容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--restart=always \</span><br><span class="line">--name kibana \</span><br><span class="line">--network es-net \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">kibana:7.12.1</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p><p>访问<a href="http://ip:5601/">http://ip:5601</a></p></li></ol><h4 id="3-安装ik分词器"><a href="#3-安装ik分词器" class="headerlink" title="3. 安装ik分词器"></a>3. 安装ik分词器</h4><ol><li><p>进入es容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it es /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>在线安装 </p><p>___注意：安装IK分词器的版本，必须和Elasticsearch的版本一致___。安装其他版本的将版本号修改即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br></pre></td></tr></table></figure></li></ol><h2 id="四、远程连接"><a href="#四、远程连接" class="headerlink" title="四、远程连接"></a>四、远程连接</h2><h3 id="使用idea远程连接docker"><a href="#使用idea远程连接docker" class="headerlink" title="使用idea远程连接docker"></a>使用idea远程连接docker</h3><ol><li><p>配置docker远程连接端口</p><ul><li><p>编辑docker 配置文件</p><p><code>vim /lib/systemd/system/docker.service</code></p></li><li><p>修改配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将[Service]下的ExecStart添加 -H tcp://0.0.0.0:2375,如：</span></span><br><span class="line">ExecStart=/usr/bin/dockerd   -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure></li></ul></li><li><p>加载配置：<code>systemctl daemon-reload</code></p></li><li><p>重启docker：<code>systemctl restart docker</code> </p></li><li><p>开启防火墙或开放2375端口：操作☞上文 <a href="##%E4%BA%8C%E3%80%81docker%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4">docker基本命令</a></p></li><li><p>测试远程访问，访问 http:&#x2F;&#x2F;[虚拟机ip]:2375&#x2F;version，出现展示docker版本的一段json即说明设置成功</p></li><li><p>idea配置docker连接</p><ul><li>下载插件docker</li><li>在设置中找到docker并添加连接<ul><li>点击加号</li><li>选择TCP socket,添加Engine API URL </li><li>url格式为tcp:&#x2F;&#x2F;【主机地址】:2375，如下图所示</li></ul></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309271907214.png" alt="image-20230927190648105"></p></li></ol><h2 id="五、本地镜像发布"><a href="#五、本地镜像发布" class="headerlink" title="五、本地镜像发布"></a>五、本地镜像发布</h2><h3 id="1-commit命令"><a href="#1-commit命令" class="headerlink" title="1. commit命令"></a>1. commit命令</h3><ol><li><p>拉取ubuntu镜像：<code>docker pull ubuntu</code></p></li><li><p>运行容器，ubuntu不能后台运行，所以直接进入：<code>docker run -it 【镜像id】 /bin/bash</code></p></li><li><p>默认没有vim命令,执行<code>vim a.txt</code>会保存vim没有找到</p></li><li><p>下载vim：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure></li><li><p>此时再进行测试，发现vim安装成功</p></li><li><p>提交容器副本使之成为一个新的镜像：本ubuntu已经添加了vim命令，将其提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure></li><li><p>提交之后，执行<code>docker images</code>会看到刚才提交的镜像，运行这个镜像，执行vim命令，发现该命令已存在</p></li></ol><h3 id="2-本地镜像发布到阿里云"><a href="#2-本地镜像发布到阿里云" class="headerlink" title="2.本地镜像发布到阿里云"></a>2.本地镜像发布到阿里云</h3><ol><li><p>进入阿里云容器镜像服务，在实例列表中创建个人示例</p></li><li><p>设置Registry登录密码：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301339493.png" alt="image-20230930133923420"></p></li><li><p>点击命名空间 -&gt; 创建命名空间</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301352204.png" alt="image-20230930135203126"></p></li><li><p>点击镜像仓库 -&gt;创建命名空间</p><ul><li><p>填写仓库信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301359636.png" alt="image-20230930135742334"></p></li><li><p>选择代码源</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301400448.png" alt="image-20230930140002375"></p></li></ul></li><li><p>参照阿里云给出的命令将本地镜像推送到阿里云：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301408309.png" alt="image-20230930140806238"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301410426.png" alt="image-20230930141043149"></p></li><li><p>在镜像版本界面就可以看到推送的本地镜像了</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301411231.png" alt="image-20230930141153163"></p></li></ol><h3 id="3-从阿里云拉取镜像到本地"><a href="#3-从阿里云拉取镜像到本地" class="headerlink" title="3. 从阿里云拉取镜像到本地"></a>3. 从阿里云拉取镜像到本地</h3><ul><li><p>参照第二条命令进行拉取</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301421460.png" alt="image-20230930141450623"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309301422243.png" alt="image-20230930141745319"></p></li></ul><h3 id="4-本地镜像推送到私有仓库"><a href="#4-本地镜像推送到私有仓库" class="headerlink" title="4.本地镜像推送到私有仓库"></a>4.本地镜像推送到私有仓库</h3><ol><li><p>下载镜像 Docker Registry：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure></li><li><p>运行私有库Registry，相当于本地有个私有Dockerhub：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 5000:5000 \</span><br><span class="line">-v /mydata/myregistry:/tmp/registry \</span><br><span class="line">--name=registry \</span><br><span class="line">--restart=always \</span><br><span class="line">--privileged=true registry</span><br></pre></td></tr></table></figure></li><li><p>为拉取的简单版ubuntu添加ifconfig命令</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202310011309814.png" alt="image-20231001130939742"></p></li><li><p>commit:</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202310011313809.png" alt="image-20231001131301614"></p></li><li><p>将新镜像修改符合私服规范的tag：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag 镜像名:版本 虚拟机ip:5000/镜像名:版本</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件使之支持http：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加如下配置：</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;阿里云镜像地址&quot;</span>],</span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;虚拟机ip:5000&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>重启docker</strong></em></p></li><li><p>push到私服库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push 虚拟机ip:5000/镜像名:版本tag</span><br></pre></td></tr></table></figure></li><li><p>验证私服库上有什么镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://虚拟机ip:5000/v2/_catalog</span><br><span class="line"><span class="comment"># 查看镜像tag</span></span><br><span class="line">curl http://虚拟机ip:5000/v2/镜像名/tags/list</span><br></pre></td></tr></table></figure></li><li><p>拉取镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 虚拟机ip:5000/镜像名:版本tag</span><br></pre></td></tr></table></figure></li></ol><h2 id="六、docker高级安装"><a href="#六、docker高级安装" class="headerlink" title="六、docker高级安装"></a>六、docker高级安装</h2><h3 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h3><ol><li><p>新建主服务器容器实例3307</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3307:3306 --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /mydata/mysql-master/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql-master/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql-master/conf:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name mysql-master \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure></li><li><p>进入&#x2F;mydata&#x2F;mysql-master&#x2F;conf目录下下新建my.cnf，修改配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mydata/mysql-master/conf</span><br><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，同一局域网中需要唯一</span><br><span class="line">server_id=101</span><br><span class="line">## 指定不需要同步的数据库名称</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">## 开启二进制日志功能</span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line">## 设置二进制日志使用内存大小（事务）</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">## 设置使用的二进制日志格式（mixed,statement,row）</span><br><span class="line">binlog_format=mixed</span><br><span class="line">## 二进制日志过期清理时间。默认值是0，表示不自动清理</span><br><span class="line">expire_logs_days=7</span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制终端</span><br><span class="line">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure></li><li><p>重启master实例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-master</span><br></pre></td></tr></table></figure></li><li><p>进去mysql-master容器，创建数据同步用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql-master bash</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>新建从服务器容器示例3308</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3308:3306 --privileged=<span class="literal">true</span> \</span><br><span class="line">-v /mydata/mysql-slave/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql-slave/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql-slave/conf:/etc/mysql/conf.d \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">--name mysql-slave \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure></li><li><p>进入&#x2F;mydata&#x2F;mysql-slave&#x2F;conf目录下下新建my.cnf，修改配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mydata/mysql-slave/conf</span><br><span class="line">vim my.cnf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">## 设置server_id，同一局域网中需要唯一</span><br><span class="line">server_id=102</span><br><span class="line">## 指定不需要同步的数据库名称</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">## 开启二进制日志功能</span><br><span class="line">log-bin=mall-mysql-slave1-bin</span><br><span class="line">## 设置二进制日志使用内存大小（事务）</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">## 设置使用的二进制日志格式（mixed,statement,row）</span><br><span class="line">binlog_format=mixed</span><br><span class="line">## 二进制日志过期清理时间。默认值是0，表示不自动清理</span><br><span class="line">expire_logs_days=7</span><br><span class="line">## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制终端</span><br><span class="line">## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line">## relay_log配置中继日志</span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line">## log_slave_updates表示slave将复制事件写进自己的二进制日志</span><br><span class="line">log_slave_updates=1</span><br><span class="line">## slave设置为只读（具有super权限的用户除外）</span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure></li><li><p>重启slave示例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-slave</span><br></pre></td></tr></table></figure></li><li><p>在主数据库查看主从同步状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status; #可在最后加&#x27;\G&#x27;来以k:v形式查看</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202310031401956.png" alt="image-20231003140121859"></p></li><li><p>进入mysql-slave容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql-slave bash</span><br><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li><li><p>在从数据库中配置主从复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=&quot;192.168.60.129&quot;,master_user=&#x27;slave&#x27;,master_password=&#x27;123456&#x27;,master_port=3307,master_log_file=&quot;mall-mysql-bin.000001&quot;,master_log_pos=617,master_connect_retry=30;</span><br></pre></td></tr></table></figure><blockquote><p>master_host：主数据库的IP地址</p><p>master_user：在主数据库创建的用于同步数据的用户账号</p><p>master_password：在主数据库创建的用于同步数据的用户密码</p><p>master_port：主数据库的运行端口</p><p>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数</p><p>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数</p><p>master_connect_retry：连接失败重试的时间间隔，单位为秒</p></blockquote></li><li><p>在从数据库中查看主从同步状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status; #可在最后加&#x27;\G&#x27;来以k:v形式查看</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202310031404515.png" alt="image-20231003140418298"></p></li><li><p>在从数据库中开启主从同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure></li><li><p>查看从数据库状态发现已经同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202310031403680.png" alt="image-20231003140337444"></p></li><li><p>主从复制测试</p><p>在主数据库中创建数据库、表，插入数据，在从数据库中查看是否同步。OVER!</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务并发异常</title>
      <link href="/2023/09/11/%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E5%BC%82%E5%B8%B8/"/>
      <url>/2023/09/11/%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><ul><li><p>事务是由N步数据库操作序列组成的逻辑执行单元，这系列操作要么全执行，要么全放弃执行</p></li><li><p>事务的特性（ACID）</p><ul><li>原子性：事务是应用中不可再分的最小执行体</li><li>一致性：事务执行的结果，需使数据从一个一致性状态，变为另一个一致性状态</li><li>隔离性：各个事务的执行互不干扰，任何事务的内部操作对其他的事务都是隔离的</li><li>持久性：事务一旦提交，对数据所做的任何改变都要记录到永久存储器中</li></ul></li><li><p>事物的隔离性</p><ul><li><p>第一类丢失更新：某一个事务的回滚导致另一个事务已更新的数据丢失了</p><p>第二类丢失更新：某一个事务的提交导致另一个事务已更新的数据丢失了</p></li><li><p>脏读：某一个事务读取了另一个事务未提交的数据</p></li><li><p>不可重复读：某一个事务，对同一数据前后读取的结果不一致</p></li><li><p>幻读：某一个事务，对同一个表前后查询到的行数不一致</p></li></ul></li><li><p>事务隔离级别与是否避免的并发异常</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309111213692.png" alt="image-20230911121032627"></p></li><li><p>实现机制</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/fosss666/notebook/img/202309111213833.png" alt="image-20230911121344790"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法详解</title>
      <link href="/2023/08/09/markdown%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/08/09/markdown%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown常用语法"><a href="#markdown常用语法" class="headerlink" title="markdown常用语法"></a>markdown常用语法</h1><p>​<strong>Markdown 是一种<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/52671915?fromModule=lemma_inlink">轻量级标记语言</a> ，广泛应用于各种文档及博客编写，多的不说，随便在github上搜个项目它的介绍绝对是md文档，又比如 用Word或者别的文本编辑器写好一篇文章，兴高采烈地发布到博客、论坛、网站上时，发现格式完全乱了，于是需要花费大量的时间来重新排版，处理图片、缩进、字体、加粗、标题等。三番五次之后，开始发现文章写作可能只花了半小时，重新排版就花了十多分钟。更让人不悦的是，当我们要把同一篇文章发布到另一个网页上时，这样的排版还要重新做一次。 而使用md完全避免了这些问题，md还是非常好上手的，编辑器也很多，比如vs code，MarkdownPad，BookPad，小书匠，Typora等等，反正一搜一大堆，可以按照自己的喜好使用，我用的是Typora。下面记录的是以前我学习markdown时的一些记录，内容不多但比较实用。</strong></p><h1 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h1><p>用几个#在文字前边就是几级标题，#后面要有<code>空格</code>或者ctrl+数字（上边的数字）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">…… 以此类推</span><br></pre></td></tr></table></figure><h1 id="各种线，脚注"><a href="#各种线，脚注" class="headerlink" title="各种线，脚注"></a>各种线，脚注</h1><p>***实现分割线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** 再敲个回车就会出现一条分割线</span><br></pre></td></tr></table></figure><hr><hr><hr><hr><p><em>斜体  一个下划线包裹实现斜体</em>    <em>斜体字</em>   </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_内容_</span><br></pre></td></tr></table></figure><p><strong>两个下划线包裹实现粗体</strong>   <strong>粗体</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__内容__</span><br></pre></td></tr></table></figure><p><em><strong>三个下划线包裹实现粗斜体</strong></em>   <em><strong>粗斜体</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">___内容___</span><br></pre></td></tr></table></figure><p><del>两个波浪号包裹实现删除线</del>   <del>删除线</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~内容~~</span><br></pre></td></tr></table></figure><p><u>u标签实现下划线</u>    <u>U标签</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;内容&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>我是脚注<a href="%E6%9C%80%E7%89%9B%E4%BA%86hahha">^1</a>   【^ 文字】    </p><p>引用脚注2<a href="%E8%84%9A%E6%B3%A82">^2</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">内容[^脚注]</span><br><span class="line">[^脚注]:脚注内容</span><br></pre></td></tr></table></figure><h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><p>使用符号<code>+</code>或<code> -</code>或<code> *</code>，后边跟个空格再加内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ 内容</span><br><span class="line">- 内容</span><br><span class="line">* 内容</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>哈哈哈</li></ul><ul><li>哈哈</li></ul><h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 内容     敲回车自动填充下个数字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>哈哈</p><ol><li>真的不好玩</li><li>是吗</li></ol></li><li></li></ol><blockquote><p>用“&gt;”引用</p></blockquote><blockquote><ol><li><p>one</p><ul><li><p>one1</p></li><li><p>one2</p></li></ul></li><li><p>two</p></li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 内容   内容前边别忘了有空格</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ol><li><p>使用&#96;&#96;包起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`内容`</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>比如<code>printf</code></p></li><li><p>使用&#96;&#96;&#96;键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入三个`然后敲回车</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>代码</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">代码块</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[链接描述](链接地址)</span><br><span class="line">&lt;链接地址&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度一下](https://www.baidu.com)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">百度一下</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.baidu.com&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p><a href="https://www.fosss666.github.io/">https://www.fosss666.github.io</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[跳转到二级标题](#二级标题)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="#%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98">跳转到二级标题</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>用！【】（）这几个符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![名称（可省）](链接或位置)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例： <img src= "/img/loading.gif" data-lazy-src="https://ts1.cn.mm.bing.net/th/id/R-C.2180f1280f61bd3a214d89afb1a8c690?rik=8jCt0oNiYNQJEw&riu=http://img.redocn.com/sheying/20170502/yishinongsuokafei_8173863.jpg&ehk=qDotAPzpCoSJmyRshtxNnnbkiDHDa5FicfgIpe66TG4=&risl=&pid=ImgRaw&r=0" alt="百度图片"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>使用|来分割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">| 编号 | 姓名 | 年龄 |  然后敲回车</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>编号</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>姓名</th><th>学号</th><th>年龄</th></tr></thead><tbody><tr><td>法</td><td></td><td>d</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:表情名</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_40896997/article/details/106551767">表情大全</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:smile</span><br><span class="line">:cry</span><br><span class="line">:a:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>:smile:</p><p>:cry:</p><p>:a:</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存穿透、缓存雪崩、缓存击穿三大问题介绍及解决思路</title>
      <link href="/2023/08/08/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
      <url>/2023/08/08/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存穿透、缓存雪崩、缓存击穿三大问题介绍及解决思路"><a href="#缓存穿透、缓存雪崩、缓存击穿三大问题介绍及解决思路" class="headerlink" title="缓存穿透、缓存雪崩、缓存击穿三大问题介绍及解决思路"></a>缓存穿透、缓存雪崩、缓存击穿三大问题介绍及解决思路</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​我们知道缓存的应用场景之一是一部分数据经常被访问，如果这部分数据只存放在数据库中的话，每次访问都要向数据库发送请求，大量并发下数据库压力就会非常大，可能导致查询效率低甚至是数据库崩溃。而缓存的使用相当于将这部分经常访问的数据放在缓存中，这样就会客户端请求就会直接指向缓存，大大减轻数据库的压力，当然这种效果只是缓存使用的一部分原因，缓存还有很多用处。</p><p>​缓存穿透是指客户端请求的数据在缓存中和数据库中均不存在，首先缓存永远不会生效，这些请求就会交给数据库处理，而数据库也没有这些数据，也就无法将数据放到缓存中，缓存就无法起到作用了。这些请求相当于穿透了缓存，直接打向了数据库，这就是缓存穿透。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>缓存空对象：当我们客户端访问不存在的数据时，哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，即value设为null，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到缓存了。</p><p>​这种方式实现起来比较简单，缺点是容易造成数据短期的不一致，因为可能数据库中有相关数据了，但是缓存中还存储的null，但是我们在向缓存中设置数据的时候是会设置过期时间的，等过期时间到了，数据也就更新到正常值了。</p></li><li><p>布隆过滤：布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中，假设布隆过滤器判断这个数据不存在，则直接返回。</p><p>​这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要是哈希思想，就可能存在哈希冲突。</p></li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><pre><code>     缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。什么叫大量缓存key同时失效呢？简单来说，就是大量key的过期时间同时到达，即缓存中相应数据已经删除，这时候大量请求就会略过缓存直达数据库，使数据库瞬间面临巨大压力，就像发生雪崩了一样。</code></pre><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>​缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>互斥锁</p><p>​因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行。</p><p>​假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。</p></li><li><p>逻辑过期</p><p>​我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。</p><p>​我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程会开启一个 线程去进行以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p><p>​换句话说，用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。</p><p>​这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> redis </tag>
            
            <tag> 教程 </tag>
            
            <tag> 缓存三大问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常用数据结构</title>
      <link href="/2023/08/07/Redis%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/08/07/Redis%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="本文介绍redis的数据结构及使用"><a href="#本文介绍redis的数据结构及使用" class="headerlink" title="本文介绍redis的数据结构及使用"></a>本文介绍redis的数据结构及使用</h1><h2 id="redis数据结构概述"><a href="#redis数据结构概述" class="headerlink" title="redis数据结构概述"></a>redis数据结构概述</h2><p>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样，常用类型有String、Hash、List、Set、SortedSet，接下来会分别介绍其结构特点和命令使用。</p><h2 id="redis通用命令"><a href="#redis通用命令" class="headerlink" title="redis通用命令"></a>redis通用命令</h2><p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p><ul><li><p>KEYS：查看符合模板的所有key（在生产环境下，不推荐使用keys 命令，因为这个命令在key过多的情况下，效率不高）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询以a开头的key</span></span><br><span class="line">127.0.0.1:6379&gt; keys a*</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>DEL：删除一个指定的key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; help del</span><br><span class="line"></span><br><span class="line">  DEL key [key ...]</span><br><span class="line">  summary: Delete a key</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del name #删除单个</span><br><span class="line">(integer) 1  #成功删除1个</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;age&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 #批量添加数据</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k3&quot;</span><br><span class="line">2) &quot;k2&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br><span class="line">4) &quot;age&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del k1 k2 k3 k4</span><br><span class="line">(integer) 3   #此处返回的是成功删除的key，由于redis中只有k1,k2,k3 所以只成功删除3个，最终返回</span><br><span class="line">127.0.0.1:6379&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys * #再查询全部的key</span><br><span class="line">1) &quot;age&quot;#只剩下一个了</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li><li><p>EXISTS：判断key是否存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; help EXISTS</span><br><span class="line"></span><br><span class="line">  EXISTS key [key ...]</span><br><span class="line">  summary: Determine if a key exists</span><br><span class="line">  since: 1.0.0</span><br><span class="line">  group: generic</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists age</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; exists name</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li><li><p>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除</p></li><li><p>TTL：查看一个KEY的剩余有效期</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; expire age 10</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) 6</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) -2</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) -2  #当这个key过期了，那么此时查询出来就是-2 </span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty list or set)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set age 10 #如果没有设置过期时间</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl age</span><br><span class="line">(integer) -1  # ttl的返回值就是-13. </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>String类型，也就是字符串类型，是Redis中最简单的存储类型。</p><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li>string：普通字符串</li></ul><ul><li>int：整数类型，可以做自增.自减操作</li><li>float：浮点类型，可以做自增.自减操作</li></ul><p>String的常见命令有：</p><ul><li>SET：添加或者修改已经存在的一个String类型的键值对</li><li>GET：根据key获取String类型的value</li><li>MSET：批量添加多个String类型的键值对</li><li>MGET：根据多个key获取多个String类型的value</li><li>INCR：让一个整型的key自增1</li><li>INCRBY:让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</li><li>INCRBYFLOAT：让一个浮点类型的数字自增并指定步长</li><li>SETNX：添加一个String类型的键值对，前提是这个key不存在，否则不执行</li><li>SETEX：添加一个String类型的键值对，并且指定有效期</li><li>SET 和GET: 如果key不存在则是新增，如果存在则是修改</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name Rose  //原来不存在</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get name </span><br><span class="line"><span class="string">&quot;Rose&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name Jack //原来存在，就是修改</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br></pre></td></tr></table></figure><ul><li>MSET和MGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MSET k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; MGET name age k1 k2 k3</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Jack&quot;</span> <span class="comment">//之前存在的name</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;10&quot;</span>   <span class="comment">//之前存在的age</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;v1&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;v2&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure><ul><li>INCR和INCRBY和DECY</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age </span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incr age <span class="comment">//增加1</span></span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age <span class="comment">//获得age</span></span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age <span class="number">2</span> <span class="comment">//一次增加2</span></span><br><span class="line">(integer) <span class="number">13</span> <span class="comment">//返回目前的age的值</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">15</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age -<span class="number">1</span> <span class="comment">//也可以增加负数，相当于减</span></span><br><span class="line">(integer) <span class="number">14</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; incrby age -<span class="number">2</span> <span class="comment">//一次减少2个</span></span><br><span class="line">(integer) <span class="number">12</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DECR age <span class="comment">//相当于 incr 负数，减少正常用法</span></span><br><span class="line">(integer) <span class="number">11</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get age </span><br><span class="line"><span class="string">&quot;11&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>SETNX</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; help setnx</span><br><span class="line"></span><br><span class="line">  SETNX key value</span><br><span class="line">  summary: Set the value of a key, only <span class="keyword">if</span> the key does not exist</span><br><span class="line">  since: <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  group: string</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; set name Jack  <span class="comment">//设置名称</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx name lisi <span class="comment">//如果key不存在，则添加成功</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name <span class="comment">//由于name已经存在，所以lisi的操作失败</span></span><br><span class="line"><span class="string">&quot;Jack&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; setnx name2 lisi <span class="comment">//name2 不存在，所以操作成功</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; get name2 </span><br><span class="line"><span class="string">&quot;lisi&quot;</span></span><br></pre></td></tr></table></figure><ul><li>SETEX</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex name 10 jack</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 8</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Hash类型"><a href="#Hash类型" class="headerlink" title="Hash类型"></a>Hash类型</h2><p>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的HashMap结构。</p><p>String结构是将对象序列化为JSON字符串后存储，当需要修改对象某个字段时很不方便：</p><p>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD：</p><p><strong>Hash类型的常见命令</strong></p><ul><li><p>HSET key field value：添加或者修改hash类型key的field的值</p></li><li><p>HGET key field：获取一个hash类型key的field的值</p></li><li><p>HMSET：批量添加多个hash类型key的field的值</p></li><li><p>HMGET：批量获取多个hash类型key的field的值</p></li><li><p>HGETALL：获取一个hash类型的key中的所有的field和value</p></li><li><p>HKEYS：获取一个hash类型的key中的所有的field</p></li><li><p>HINCRBY:让一个hash类型key的字段值自增并指定步长</p></li><li><p>HSETNX：添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</p></li></ul><ul><li>HSET和HGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> name Lucy<span class="comment">//大key是 heima:user:3 小key是name，小value是Lucy</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">21</span><span class="comment">// 如果操作不存在的数据，则是新增</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET heima:user:<span class="number">3</span> age <span class="number">17</span> <span class="comment">//如果操作存在的数据，则是修改</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> name </span><br><span class="line"><span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET heima:user:<span class="number">3</span> age</span><br><span class="line"><span class="string">&quot;17&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HMSET和HMGET</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name HanMeiMei</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET heima:user:<span class="number">4</span> name LiLei age <span class="number">20</span> sex man</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMGET heima:user:<span class="number">4</span> name age sex</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HGETALL</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HKEYS和HVALS</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HKEYS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br></pre></td></tr></table></figure><ul><li>HINCRBY</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age <span class="number">2</span></span><br><span class="line">(integer) <span class="number">22</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HVALS heima:user:<span class="number">4</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;LiLei&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;22&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;man&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HINCRBY  heima:user:<span class="number">4</span> age -<span class="number">2</span></span><br><span class="line">(integer) <span class="number">20</span></span><br></pre></td></tr></table></figure><ul><li>HSETNX</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user4 sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSETNX heima:user:<span class="number">3</span> sex <span class="title function_">woman</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGETALL heima:user:<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Lucy&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;17&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;sex&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;woman&quot;</span></span><br></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h2><p>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</p><p>特征也与LinkedList类似：</p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</p><p><strong>List的常见命令有：</strong></p><ul><li>LPUSH key element … ：向列表左侧插入一个或多个元素</li><li>LPOP key：移除并返回列表左侧的第一个元素，没有则返回nil</li><li>RPUSH key element … ：向列表右侧插入一个或多个元素</li><li>RPOP key：移除并返回列表右侧的第一个元素</li><li>LRANGE key star end：返回一段角标范围内的所有元素</li><li>BLPOP和BRPOP：与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</li></ul><p><img src= "/img/loading.gif" data-lazy-src="E:/学习资料/学习文档/redis/Redis.assets/1652943604992.png" alt="1652943604992"></p><ul><li>LPUSH和RPUSH</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPUSH users <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPUSH users <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">(integer) <span class="number">6</span></span><br></pre></td></tr></table></figure><ul><li>LPOP和RPOP</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LPOP users</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; RPOP users</span><br><span class="line"><span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure><ul><li>LRANGE</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; LRANGE users <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;4&quot;</span></span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h2 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h2><p>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</p><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集.并集.差集等功能</li></ul><p><strong>Set类型的常见命令</strong></p><ul><li>SADD key member … ：向set中添加一个或多个元素</li><li>SREM key member … : 移除set中的指定元素</li><li>SCARD key： 返回set中元素的个数</li><li>SISMEMBER key member：判断一个元素是否存在于set中</li><li>SMEMBERS：获取set中的所有元素</li><li>SINTER key1 key2 … ：求key1与key2的交集</li><li>SDIFF key1 key2 … ：求key1与key2的差集</li><li>SUNION key1 key2 ..：求key1和key2的并集</li></ul><p><strong>具体命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd s1 a b <span class="title function_">c</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers s1</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;c&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; srem s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">a</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER s1 <span class="title function_">b</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">s1</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>案例</strong></p><ul><li>将下列数据用Redis的Set集合来存储：</li><li>张三的好友有：李四.王五.赵六</li><li>李四的好友有：王五.麻子.二狗</li><li>利用Set的命令实现下列功能：</li><li>计算张三的好友有几人</li><li>计算张三和李四有哪些共同好友</li><li>查询哪些人是张三的好友却不是李四的好友</li><li>查询张三和李四的好友总共有哪些人</li><li>判断李四是否是张三的好友</li><li>判断张三是否是李四的好友</li><li>将李四从张三的好友列表中移除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD zs lisi wangwu <span class="title function_">zhaoliu</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SADD ls wangwu mazi <span class="title function_">ergou</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SCARD <span class="title function_">zs</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">3</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SINTER zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SDIFF zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SUNION zs ls</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;mazi&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;ergou&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SISMEMBER ls <span class="title function_">zhangsan</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SREM zs <span class="title function_">lisi</span></span><br><span class="line"><span class="params">(integer)</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SMEMBERS zs</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="SortSet类型"><a href="#SortSet类型" class="headerlink" title="SortSet类型"></a>SortSet类型</h2><p>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</p><p>SortedSet具备下列特性：</p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><p>SortedSet的常见命令有：</p><ul><li>ZADD key score member：添加一个或多个元素到sorted set ，如果已经存在则更新其score值</li><li>ZREM key member：删除sorted set中的一个指定元素</li><li>ZSCORE key member : 获取sorted set中的指定元素的score值</li><li>ZRANK key member：获取sorted set 中的指定元素的排名</li><li>ZCARD key：获取sorted set中的元素个数</li><li>ZCOUNT key min max：统计score值在给定范围内的所有元素的个数</li><li>ZINCRBY key increment member：让sorted set中的指定元素自增，步长为指定的increment值</li><li>ZRANGE key min max：按照score排序后，获取指定排名范围内的元素</li><li>ZRANGEBYSCORE key min max：按照score排序后，获取指定score范围内的元素</li><li>ZDIFF.ZINTER.ZUNION：求差集.交集.并集</li></ul><p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p><ul><li><strong>升序</strong>获取sorted set 中的指定元素的排名：ZRANK key member</li><li><strong>降序</strong>获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li></ul>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> redis </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea插件分享2</title>
      <link href="/2023/08/07/idea%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB2/"/>
      <url>/2023/08/07/idea%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB2/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA提高写代码效率和代码规范性的插件"><a href="#IntelliJ-IDEA提高写代码效率和代码规范性的插件" class="headerlink" title="IntelliJ IDEA提高写代码效率和代码规范性的插件"></a>IntelliJ IDEA提高写代码效率和代码规范性的插件</h1><p><em><strong>上期分享了的插件主要是为了提高代码或编辑器的观赏性，以娱乐为主，这期分享更加实用的代码。</strong></em></p><h2 id="1-Key-Promoter-X"><a href="#1-Key-Promoter-X" class="headerlink" title="1.Key Promoter X"></a>1.Key Promoter X</h2><p>该插件能够在你使用鼠标完成一项操作时，提供一个快捷键的提示。通过熟悉快捷键，能够大大提高你的编码效率。</p><h2 id="2-CheckStyle-IDEA"><a href="#2-CheckStyle-IDEA" class="headerlink" title="2.CheckStyle-IDEA"></a>2.CheckStyle-IDEA</h2><p>这个插件集成了Checkstyle，可以帮助你遵循编码规范。它会在你编写代码的同时检查语法错误、代码风格问题和潜在的Bug，并给出相应的警告或错误提示。</p><h2 id="3-SonarLint"><a href="#3-SonarLint" class="headerlink" title="3.SonarLint"></a>3.SonarLint</h2><p>这是一个非常受欢迎的静态代码分析工具，可以帮助你在编写代码时发现并修复潜在的问题。SonarLint能够检测代码质量问题、安全问题、性能问题等，使你的代码更加健壮。</p><h2 id="4-Rainbow-Brackets"><a href="#4-Rainbow-Brackets" class="headerlink" title="4.Rainbow Brackets"></a>4.Rainbow Brackets</h2><p>代码中的括号配对是编码过程中常见的错误，而这个插件会以不同的颜色显示括号，以明显区分不同的级别。这样一来你就能够更容易地识别括号是否匹配，减少错误率。</p><h2 id="5-GitToolBox"><a href="#5-GitToolBox" class="headerlink" title="5.GitToolBox"></a>5.GitToolBox</h2><p>如果你使用Git进行版本控制，并频繁地切换支、查看日志、提交和推送更改，该插件能够大大提高你的工作效率。你可以通过该插件直接在IDEA中管理和操作Git的各种命令。</p><p>以上插件能够帮助你在编码过程中提高效率和代码质量。希望对你有所助！</p>]]></content>
      
      
      <categories>
          
          <category> idea插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
            <tag> 安利 </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea插件分享1</title>
      <link href="/2023/08/07/idea%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB1/"/>
      <url>/2023/08/07/idea%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB1/</url>
      
        <content type="html"><![CDATA[<h1 id="IntelliJ-IDEA好玩和好看的插件"><a href="#IntelliJ-IDEA好玩和好看的插件" class="headerlink" title="IntelliJ IDEA好玩和好看的插件"></a>IntelliJ IDEA好玩和好看的插件</h1><p>IntelliJ IDEA是一款功能强大的集成开发环境（IDE），而且还有一些好玩和好看的插件可以为你的编程体验增添一些乐趣和个性化。以下是几个推荐的好玩和好看的插件：</p><h2 id="1-CodeGlance"><a href="#1-CodeGlance" class="headerlink" title="1. CodeGlance"></a>1. <strong>CodeGlance</strong></h2><p>这个插件在编辑器的侧边栏添加了一个小型的缩略图，用来展示整个文件的结构。它能够帮助你更好地理解和导航代码。缩略图的外观非常简洁，既实用又美观。</p><h2 id="2-Rainbow-Brackets"><a href="#2-Rainbow-Brackets" class="headerlink" title="2. Rainbow Brackets"></a>2. <strong>Rainbow Brackets</strong></h2><p>这个插件可以为括号加上不同的彩色，在你编写代码时，可以让你更容易找到每个括号的匹配对应关系。它不仅能提高代码的可读性，还能给编辑器增色不少。</p><h2 id="3-Material-Theme-UI"><a href="#3-Material-Theme-UI" class="headerlink" title="3. Material Theme UI"></a>3. <strong>Material Theme UI</strong></h2><p>这是一款非常流行的主题插件，提供了一系列漂亮的颜色方案和界面样式，使得IDE的界面更加现代化和美观。你可以根据个人偏好自定义主题，让你的IDE与众不同。</p><h2 id="4-Nyan-Progress-Bar"><a href="#4-Nyan-Progress-Bar" class="headerlink" title="4. Nyan Progress Bar"></a>4. <strong>Nyan Progress Bar</strong></h2><p>这个插件会将进度条变成彩色的”Nyan Cat”，在后台任务执行时，它会伴随着”Nyan Cat”的奔跑，给你带来一些愉悦和娱乐。你可以在IDE设置中开启它，让编码过程更加有趣。</p><h2 id="5-Presentation-Assistant"><a href="#5-Presentation-Assistant" class="headerlink" title="5. Presentation Assistant"></a>5. <strong>Presentation Assistant</strong></h2><p>这个插件会在编辑器上方显示一个小巧的辅助工具栏，用于展示你当前按下的键盘快捷键。不仅可以帮助你记忆快捷键，还能在做演示或录屏时，让观众更好地跟踪你的操作。</p><p>以上是几个IntelliJ IDEA的好玩和好看的插件，它们可以为你的编程体验增添一些乐趣和个性化。试试这些插件，让你的IDE更加好玩和好看吧！</p>]]></content>
      
      
      <categories>
          
          <category> idea插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> 插件 </tag>
            
            <tag> 安利 </tag>
            
            <tag> 美化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安利edge浏览器chatgpt插件</title>
      <link href="/2023/08/07/%E5%AE%89%E5%88%A9edge%E6%B5%8F%E8%A7%88%E5%99%A8chatgpt%E6%8F%92%E4%BB%B6/"/>
      <url>/2023/08/07/%E5%AE%89%E5%88%A9edge%E6%B5%8F%E8%A7%88%E5%99%A8chatgpt%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="WebTab插件"><a href="#WebTab插件" class="headerlink" title="WebTab插件"></a>WebTab插件</h1><p>___WeTab___是一个集成了众多实用功能的新标签页，让你的上网体验更加便捷和个性化。可以在edge浏览器的扩展中搜索添加，集成<code>chatgpt</code>只是其中一个功能，以下是一些WeTab的其他功能和特点：</p><h2 id="1-快速访问常用网站"><a href="#1-快速访问常用网站" class="headerlink" title="1. 快速访问常用网站"></a>1. 快速访问常用网站</h2><p>WeTab为你提供快速访问常用网站的功能，你可以在主界面轻松地设置你最常访问的网站链接。以后每次打开WeTab，你都可以直接点击链接，无需再手动输入网址或搜索。</p><h2 id="2-实时天气预报"><a href="#2-实时天气预报" class="headerlink" title="2. 实时天气预报"></a>2. 实时天气预报</h2><p>WeTab会根据你的地理位置实时提供准确的天气预报。你可以通过点击天气模块了解当前天气情况，以便做好出行、穿衣和活动的准备。</p><h2 id="3-智能搜索"><a href="#3-智能搜索" class="headerlink" title="3. 智能搜索"></a>3. 智能搜索</h2><p>WeTab集成了强大的智能搜索功能，由ChatAI提供支持。ChatAI使用gpt-3.5-turbo模型，能够理解你的问题，并提供准确的答案或相关信息。无论是搜索具体的知识问题还是获取实用的建议，ChatAI都能为你提供帮助。</p><h2 id="4-个人待办事项"><a href="#4-个人待办事项" class="headerlink" title="4. 个人待办事项"></a>4. 个人待办事项</h2><p>WeTab还提供了个人待办事项功能，帮助你管理日常任务和提醒事项。你可以添加、编辑和完成任务，并设置提醒时间。无论是日常工作、学习还是生活，WeTab都能帮你保持高效和有序。</p><h2 id="5-自定义主题和背景"><a href="#5-自定义主题和背景" class="headerlink" title="5. 自定义主题和背景"></a>5. 自定义主题和背景</h2><p>WeTab允许你根据个人喜好自定义主题和背景。你可以选择不同的配色方案和背景图片，让WeTab的界面更符合你的个性和审美。</p><h2 id="6-实时新闻和热门话题"><a href="#6-实时新闻和热门话题" class="headerlink" title="6. 实时新闻和热门话题"></a>6. 实时新闻和热门话题</h2><p>WeTab会为你提供实时的新闻动态和热门话题，帮你及时了解最新的社会热点和事件。你可以通过阅读新闻文章、参与讨论或分享给朋友，与世界保持紧密的联系。</p><p>WeTab致力于为用户提供更好的上网体验，通过集成众多实用功能，让你的每一次上网都更加高效和愉快！</p><p><strong>赶快添加到你的浏览器试试吧！（PS：Edge很好，我选择Google Chrome😎）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 安利好物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> 安利 </tag>
            
            <tag> chatgpt </tag>
            
            <tag> Edge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全二叉树的节点个数</title>
      <link href="/2023/08/06/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/"/>
      <url>/2023/08/06/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="完全二叉树的节点个数"><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p><em><strong>求一个完全二叉树的节点个数。   <a href="https://leetcode.cn/problems/count-complete-tree-nodes/">leetcode链接</a></strong></em></p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><h3 id="1-通用解法"><a href="#1-通用解法" class="headerlink" title="1.通用解法"></a>1.通用解法</h3><p>对于普通的二叉树，我们可以利用深度优先和广度优先方式，在遍历节点的过程中统计节点的个数，在此题中也可以采用这种方式，下面给出代码，不过多赘述。</p><p><strong>代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 深度优先</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(root== <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> countNodes(root.left)+countNodes(root.right)+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 广度优先</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       queue.add(root);</span><br><span class="line">       <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">               <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">               res++;</span><br><span class="line">               <span class="keyword">if</span> (node.left != <span class="literal">null</span>) queue.offer(cur.left);</span><br><span class="line">               <span class="keyword">if</span> (node.right != <span class="literal">null</span>) queue.offer(cur.right);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-完全二叉树解法"><a href="#2-完全二叉树解法" class="headerlink" title="2.完全二叉树解法"></a>2.完全二叉树解法</h3><p>但是这并没有达到本题<code>考察的目的</code>，题目中指出该二叉树为<code>完全二叉树</code>[^1]，所以应该利用其特点来解题。我们知道满二叉树的计算公式是：<code>2的深度次方-1</code>，而一棵完全二叉树虽然无法直接利用该公式计算，但在它的左子树或右子树中一定可以找到满二叉树，而那部分完全可以借助满二叉树的计算公式。具体思路以注释形式体现在代码中。</p><p><em>方框中为在子树中找到的满二叉树:</em></p><p><img src= "/img/loading.gif" data-lazy-src="/2023/08/06/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E4%B8%AA%E6%95%B0/image1.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 利用到完全二叉树的特点</span></span><br><span class="line"><span class="comment">    * 完全二叉树可以看成多个满二叉树拼接而成，满二叉树结点个数用2^n-1来计算，n表示层数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(root== <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//在完全二叉树中，如果一直向左的深度与一直向右的深度相等，则说明是满二叉树，普通二叉数没有这个特点</span></span><br><span class="line">       <span class="comment">//分别计算深度。为什么初始值设为1呢？如果两值计算出来相等，需要利用公式2的n次方来计算，如果值是1（left=right=null即二叉树只有一个根结点），则返回结果为2^1-1=1;如果值是2，则返回结果是2^2-1=3</span></span><br><span class="line">       <span class="type">int</span> leftDepth=<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> rightDepth=<span class="number">1</span>;</span><br><span class="line">       TreeNode left=root.left;</span><br><span class="line">       TreeNode right=root.right;</span><br><span class="line">       <span class="keyword">while</span>(left!=<span class="literal">null</span>)&#123;</span><br><span class="line">           left=left.left;</span><br><span class="line">           leftDepth++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(right!=<span class="literal">null</span>)&#123;</span><br><span class="line">           right=right.right;</span><br><span class="line">           rightDepth++;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//相等表示该树是满二叉树，运用公式计算节点数。因为后面用到了递归，所以此处的树就不一定是原树了，也可能是子树，即某棵子树为满二叉树。</span></span><br><span class="line">       <span class="keyword">if</span>(leftDepth==rightDepth)&#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="type">int</span>)(Math.pow(<span class="number">2</span>,leftDepth) -<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//不是满二叉树则向左右子树寻找满二叉树并将求得的结点数以及根结点那一个加起来，这样一层一层递归最终求得整棵树的节点数</span></span><br><span class="line">       <span class="keyword">return</span> countNodes(root.left)+countNodes(root.right)+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>[^1]: 设二叉树的<code>深度为h</code>，<code>除第 h 层外</code>，<code>其它各层 (1～h-1) 的结点数都达到最大个数(即1~h-1层为一个满二叉 树)</code>，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> 完全二叉树 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水专传奇</title>
      <link href="/2023/08/04/%E6%B0%B4%E4%B8%93%E4%BC%A0%E5%A5%87/"/>
      <url>/2023/08/04/%E6%B0%B4%E4%B8%93%E4%BC%A0%E5%A5%87/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-初入堂堂水专"><a href="#第一章-初入堂堂水专" class="headerlink" title="第一章 初入堂堂水专"></a>第一章 初入堂堂水专</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>​误入水泥地，心情很压抑。</p><p>​临时抱佛脚，啊我临时抱佛脚。</p>]]></content>
      
      
      <categories>
          
          <category> 小作文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎说说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感谢贴</title>
      <link href="/2023/08/04/%E6%84%9F%E8%B0%A2%E8%B4%B4/"/>
      <url>/2023/08/04/%E6%84%9F%E8%B0%A2%E8%B4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="我谢谢你们哈"><a href="#我谢谢你们哈" class="headerlink" title="我谢谢你们哈"></a>我谢谢你们哈</h1><h2 id="感谢CCTV"><a href="#感谢CCTV" class="headerlink" title="感谢CCTV"></a>感谢CCTV</h2><h2 id="感谢MTV"><a href="#感谢MTV" class="headerlink" title="感谢MTV"></a>感谢MTV</h2><h2 id="感谢山东卫视"><a href="#感谢山东卫视" class="headerlink" title="感谢山东卫视"></a>感谢山东卫视</h2><h2 id="感谢山河大学"><a href="#感谢山河大学" class="headerlink" title="感谢山河大学"></a>感谢山河大学</h2><h2 id="感谢水专"><a href="#感谢水专" class="headerlink" title="感谢水专"></a>感谢水专</h2><h2 id="感谢北京协和脑科疾病治理有限医院"><a href="#感谢北京协和脑科疾病治理有限医院" class="headerlink" title="感谢北京协和脑科疾病治理有限医院"></a>感谢北京协和脑科疾病治理有限医院</h2>]]></content>
      
      
      <categories>
          
          <category> 小作文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 瞎说说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/08/04/hello-world/"/>
      <url>/2023/08/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 教程 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
